# Testing of component evaluation.
#

@reset.
\alpha::Integer(0..3).
obj:= C_{\alpha};
rul:= { C_{0} -> r**2,
        C_{1} -> f(r),
		  C_{2} -> r**(-2),
		  C_{3} -> r };
evl:= @eval![@(obj)]( @(rul) );
tst:= { C_{0} -> r**2, C_{1} -> f(r), C_{2} -> r**(-2), C_{3} -> r } - @(evl);
@collect_terms!(%);
@assert(tst);

@reset.
{\alpha,\beta}::Indices(values={0,1,2,3}).
obj:= C_{\alpha} C_{\alpha};
rul:= { C_{0} -> r**2,
        C_{1} -> f(r),
		  C_{2} -> r**(-2),
		  C_{3} -> r };
evl:= @eval![@(obj)]( @(rul) );
tst:= r**2 * r**2 + f(r) * f(r) + r**(-2) * r**(-2) + r * r - @(evl);
@collect_terms!(%);
@assert(tst);

# algorithm:
#
# - need to cache information because there are potentially many operations
# - need to canonicalise indices 
#
# Eval first works at C_{\alpha} level. 
#
#
# Estimates:
#
#   Kretschmann in 10d: 10^4 values to sum over. So we need to be able to cut
#   this down to the non-zero ones early: as soon as a zero combination is found
#   for one of the factors, remove this branch of the search tree.
#   Need to:
#        a) make the algorithm work at the top, recursively down, since
            we need to keep memory/cache of already evaluated objects.
#        b) for all levels recursively visited, determine whether substitution
#           rules fix the value (hence allowing D_1 + E_1 -> 3 even if E_1 is 
#           not known as a component.
#        c) use a 'base n' type notation to map an index value combination for 
#           an n-valent tensor to an integer, so that we can make a map from
#           integers to expressions for any tensor, avoiding repeated substitutions.
#
#  A_m ( B_m + C_m ) D_n Q_n:
#
#   - collect free and dummy indices.
#      

@reset.
{\alpha,\beta}::Indices("vector", position=fixed).
{\alpha,\beta}::Integer(0..3).
g_{\alpha\beta}::Metric.
obj:= C_{\alpha} C^{\alpha};
@rewrite_indices!(%)( C_{\alpha} )( g^{\alpha\beta} );
rul:= { C_{0} -> r**2,
        C_{1} -> f(r),
		  C_{2} -> r**(-2),
		  C_{3} -> r,
        g^{0 0} -> -1,
        g^{1 1} -> 1,
        g^{2 2} -> 1,
        g^{3 3} -> 1 };
evl:= @eval![@(obj)]( @(rul) );
tst:= -r**2 * r**2 + f(r) * f(r) + r**(-2) * r**(-2) + r * r - @(evl);
@collect_terms!(%);
@assert(tst);



A_m (B_n C_n (D_k D_k + 1) + 3) P_m;


@reset.
{t, r, \phi, \theta}::Coordinate.
{m,n,p,q}::Indices(values={t,r,\phi,\theta}).
g_{m n}::Metric.

SSrule:= { g_{t t}          -> -f(r),
           g_{r r}          -> 1/f(r),
           g_{\theta\theta} -> r**2,
           g_{\phi\phi}     -> r**2 \sin(\theta)**2,
           g_{m n} -> 0 };

obj:= det(g_{m n});
@eval(%)( @(SSrule) );
@maxima(%);
tst:= - r**2 \sin(\theta)**2 - @(obj);
@collect_terms!(%);
@assert(tst);
