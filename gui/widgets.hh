/*
	Cadabra: a field-theory motivated computer algebra system.
	Copyright (C) 2001-2009  Kasper Peeters <kasper.peeters@aei.mpg.de>

   This program is free software: you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

#ifndef widgets_hh__
#define widgets_hh__

#include <string>
#include <vector>
#include <errno.h>
#include <gtkmm/box.h>
#include <gtkmm/eventbox.h>
#include <gtkmm/image.h>
#include <gtkmm/textview.h>
#include <gtkmm/separator.h>
#include <gtkmm/actiongroup.h>
#include <sstream>

const int LINE_SPACING=3;

#include "../src/stopwatch.hh"

std::string trim(const std::string& s);

/// TeXBuffer is like a TextBuffer, but now for images
/// generated by TeX+dvipng. That is, for each cell in the
/// document, there is one TeXBuffer (and one TextBuffer);
/// the TeXView and TextView classes use these buffers to
/// get their content.

class TeXBuffer : public Glib::Object {
	public:
		TeXBuffer(Glib::RefPtr<Gtk::TextBuffer>, int fs=12);
		
		static double millimeter_per_inch;

		void generate(const std::string& startwrap, const std::string& endwrap, int horizontal_pixels,
						  bool nobreqn=false);
		void regenerate(bool nobreqn=false);

		static Glib::RefPtr<TeXBuffer> create(Glib::RefPtr<Gtk::TextBuffer>);

		Glib::RefPtr<Gtk::TextBuffer>  tex_source;
		Glib::RefPtr<Gdk::Pixbuf>      pixbuf;

		Gdk::Color                foreground_colour;
		int                       font_size;
	private:
		void        erase_file(const std::string&) const;
		std::string handle_latex_errors(const std::string&) const;

		std::string               start_wrap_, end_wrap_;
		int                       horizontal_pixels_;
};


/// TeXView is an image widget with some additional Gtk
/// structure; we use it to display images generated by TeX.
/// The actual pixbuf is generated by a TeXBuffer.

class TeXView : public Gtk::EventBox {
	public:
		TeXView(Glib::RefPtr<TeXBuffer>, int hmargin=25);

		Glib::RefPtr<TeXBuffer>   texbuf;

		Gtk::VBox                 vbox;
		Gtk::HBox                 hbox;
		Gtk::Image                image;
};


/// ExpressionInput is essentially a TextView with some
/// additional i/o logic.

class ExpressionInput : public Gtk::VBox {
	public:
		ExpressionInput(Glib::RefPtr<Gtk::TextBuffer>, const std::string& fontname, int hmargin=25);
		
		class exp_input_tv : public Gtk::TextView {
			public:
				exp_input_tv(Glib::RefPtr<Gtk::TextBuffer>);
				virtual bool on_key_press_event(GdkEventKey*);
				sigc::signal1<bool, std::string> emitter;
				sigc::signal0<bool>              content_changed;
		};

		bool handle_button_press(GdkEventButton *);
		
		exp_input_tv               edit;
		Gtk::HBox                  hbox;
		Gtk::VSeparator            vsep;
};

/// TeXInput is a widget which can be used to edit and display
/// TeX input. Double-clicking on the graphical TeX version
/// toggles visibility of the edit box.

class TeXInput : public Gtk::VBox {
	public:
		TeXInput(Glib::RefPtr<Gtk::TextBuffer>, Glib::RefPtr<TeXBuffer>, const std::string& fontname);
		
		class exp_input_tv : public Gtk::TextView {
			public:
				exp_input_tv(Glib::RefPtr<Gtk::TextBuffer>);
				virtual bool on_key_press_event(GdkEventKey*);
				sigc::signal1<bool, std::string> emitter;
		};
		
		exp_input_tv               edit;

		bool toggle_visibility();

		TeXView                  texview;
};

#endif
